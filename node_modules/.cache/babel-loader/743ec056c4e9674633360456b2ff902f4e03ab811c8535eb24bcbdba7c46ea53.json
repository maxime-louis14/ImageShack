{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Moi\\\\Documents\\\\GitHub\\\\projet_pas_fou_react.js\\\\src\\\\pages\\\\inscription.js\",\n  _s = $RefreshSig$();\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport * as Yup from \"yup\";\nimport \"./style/inscription.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Inscription = () => {\n  _s();\n  const schema = Yup.object().shape({\n    email: Yup.string().email(\"email non valide\").required(),\n    password: Yup.string().required()\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    },\n    reset\n  } = useForm({\n    resolver: yupResolver(schema)\n  });\n  const onSubmitHandler = data => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email: data.email,\n        password: data.password\n      })\n    };\n    fetch(\"http://localhost:3000/account\", requestOptions).then(response => response.json()).catch(e => console.log(e));\n    reset();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Inscription \",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit(onSubmitHandler),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Lets sign you up.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ...register(\"email\"),\n        placeholder: \"email\",\n        type: \"email\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ...register(\"password\"),\n        placeholder: \"password\",\n        type: \"password\",\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Sign up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Inscription, \"QfJE0T6HTX62U8fQO3zBweX6bCg=\", false, function () {\n  return [useForm];\n});\n_c = Inscription;\nexport default Inscription;\nvar _c;\n$RefreshReg$(_c, \"Inscription\");","map":{"version":3,"names":["yupResolver","useForm","Yup","jsxDEV","_jsxDEV","Inscription","_s","schema","object","shape","email","string","required","password","register","handleSubmit","formState","errors","reset","resolver","onSubmitHandler","data","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","catch","e","console","log","className","children","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/Moi/Documents/GitHub/projet_pas_fou_react.js/src/pages/inscription.js"],"sourcesContent":["import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport \"./style/inscription.css\"\r\n\r\nconst Inscription = () => {\r\n  const schema = Yup.object().shape({\r\n    email: Yup.string().email(\"email non valide\").required(),\r\n    password: Yup.string().required(),\r\n  });\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    reset,\r\n  } = useForm({\r\n    resolver: yupResolver(schema),\r\n  });\r\n  const onSubmitHandler = (data) => {\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email: data.email, password: data.password }),\r\n    };\r\n    fetch(\"http://localhost:3000/account\", requestOptions)\r\n      .then((response) => response.json())\r\n      .catch((e) => console.log(e));\r\n    reset();\r\n  };\r\n  return (\r\n    <div className=\"Inscription \">\r\n      <form onSubmit={handleSubmit(onSubmitHandler)}>\r\n        <h2>Lets sign you up.</h2>\r\n        <br />\r\n\r\n        <input\r\n          {...register(\"email\")}\r\n          placeholder=\"email\"\r\n          type=\"email\"\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <input\r\n          {...register(\"password\")}\r\n          placeholder=\"password\"\r\n          type=\"password\"\r\n          required\r\n        />\r\n        <br />\r\n\r\n        <button type=\"submit\">Sign up</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Inscription;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}